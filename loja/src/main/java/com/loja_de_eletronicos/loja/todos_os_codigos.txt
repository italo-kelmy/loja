//// ===== LojaApplication.java =====
package com.loja_de_eletronicos.loja;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.config.server.EnableConfigServer;

@SpringBootApplication
public class LojaApplication {

    public static void main(String[] args) {
        SpringApplication.run(LojaApplication.class, args);
    }
}



//// ===== DataSourcerCfg.java =====
package com.loja_de_eletronicos.loja.Configuration;

import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;

import javax.sql.DataSource;

@Configuration
@Profile("prod")
public class DataSourcerCfg {

    @Bean
    public DataSource dataSource() {
        return DataSourceBuilder.create()
                .url("jdbc:mysql://localhost:3306/produtoseletronicos?useSSL=false&serverTimezone=UTC")
                .username("italo")
                .password("2610!!")
                .build();
    }

}



//// ===== ProdutosController.java =====
package com.loja_de_eletronicos.loja.Controller;
import com.loja_de_eletronicos.loja.Entity.Compra;
import com.loja_de_eletronicos.loja.Entity.ProdutosEletronicos;
import com.loja_de_eletronicos.loja.Service.CompraService;
import com.loja_de_eletronicos.loja.Service.CompraService;
import com.loja_de_eletronicos.loja.Service.ProdutosService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
public class ProdutosController {

    private final ProdutosService service;
    private final CarrinhoService carrinhoService;
    private final CompraService compraService;


    @Autowired
    public ProdutosController(ProdutosService service, CarrinhoService carrinhoService, CompraService compraService) {
        this.service = service;
        this.carrinhoService = carrinhoService;
        this.compraService = compraService;
    }

    @GetMapping("/produtos")
    public List<ProdutosEletronicos> produtosEletronicos() {
        return service.produtos();
    }


    @GetMapping("/produtos/{nome}")
    public ResponseEntity<?> pesquisarPorNome(ProdutosEletronicos nome) {
        return service.buscarPorNome(nome);
    }

    @GetMapping("/produtos/categoria/{categoria}")
    public ResponseEntity<?> pesquisarPorCategoria(ProdutosEletronicos categoria) {
        return service.buscarPorCategoria(categoria);
    }


    @PostMapping("/produtos/AdicionarNoCarrinho")
    public ResponseEntity<?> adicionarNoCarrinho(@RequestBody ProdutosEletronicos produtosEletronicos) {
        int quantidade = produtosEletronicos.getQuantidade();
        return carrinhoService.adicionarNoCarrinho(produtosEletronicos, quantidade);
    }

    @GetMapping("/produtos/verCarrinho")
    public ResponseEntity<?> verCarrinho() {
        return carrinhoService.mostrarCarrinho();
    }

    @GetMapping("/produtos/clean")
    public ResponseEntity<?> limparCarrinho() {
        return carrinhoService.limparCarrinho();
    }


    @PostMapping("/produtos/finalizarCompra")
    public ResponseEntity<?> compraFinalizada(@RequestBody  Compra compra) {
        int quantidade = compra.getQuantidade();
        return compraService.compraEfetuada(compra, quantidade);
    }

}



//// ===== UsuariosController.java =====
package com.loja_de_eletronicos.loja.Controller;

import com.loja_de_eletronicos.loja.Entity.Usuarios;
import com.loja_de_eletronicos.loja.Service.UsuariosService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class UsuariosController {

    private final UsuariosService service;

    @Autowired
    public UsuariosController(UsuariosService service) {
        this.service = service;
    }

    @PostMapping("/cadastro")
    public ResponseEntity<?> cadastro_de_usuario(@RequestBody @Valid Usuarios usuarios) {
        return service.cadastro(usuarios);
    }

    @PostMapping("/login")
    public String login(@RequestBody Usuarios usuarios) throws Exception {
        return service.login(usuarios);
    }


}



//// ===== Carrinho.java =====
package com.loja_de_eletronicos.loja.Entity;

import jakarta.persistence.*;

import java.util.Objects;


@Entity
@Table(name = "carrinho")
public class Carrinho {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String categoria;
    private String nome;
    private int quantidade;
    private double valor;
    private double valorTotal;


    public Carrinho(){

    }

    public Carrinho( String categoria, String nome, int quantidade, double valor) {
        this.categoria = categoria;
        this.nome = nome;
        this.quantidade = quantidade;
        this.valor = valor;
        this.valorTotal = valor * quantidade;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCategoria() {
        return categoria;
    }

    public void setCategoria(String categoria) {
        this.categoria = categoria;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public int getQuantidade() {
        return quantidade;
    }

    public void setQuantidade(int quantidade) {
        this.quantidade = quantidade;
    }

    public double getValor() {
        return valor;
    }

    public void setValor(double valor) {
        this.valor = valor;
    }

    public double getValorTotal() {
        return valorTotal;
    }

    public void setValorTotal(double valorTotal) {
        this.valorTotal = valorTotal;
    }


    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) return false;
        Carrinho carrinho = (Carrinho) o;
        return getQuantidade() == carrinho.getQuantidade() && Double.compare(getValor(), carrinho.getValor()) == 0 && Double.compare(getValorTotal(), carrinho.getValorTotal()) == 0 && Objects.equals(getId(), carrinho.getId()) && Objects.equals(getCategoria(), carrinho.getCategoria()) && Objects.equals(getNome(), carrinho.getNome());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(), getCategoria(), getNome(), getQuantidade(), getValor(), getValorTotal());
    }


}



//// ===== Compra.java =====
package com.loja_de_eletronicos.loja.Entity;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;

@Entity
public class Compra {
    @Id
    private Long id;
    private int quantidade;


    public Compra(){

    }

    public Compra(Long id, int quantidade) {
        this.id = id;
        this.quantidade = quantidade;
    }

    public Long getId() {
        return id;
    }



    public void setId(Long id) {
        this.id = id;
    }

    public int getQuantidade() {
        return quantidade;
    }

    public void setQuantidade(int quantidade) {
        this.quantidade = quantidade;
    }
    
}



//// ===== ProdutosEletronicos.java =====
package com.loja_de_eletronicos.loja.Entity;

import jakarta.persistence.*;

import java.util.Objects;

@Entity
@Table(name = "produtos_eletronicos")
public class ProdutosEletronicos {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String categoria;
    private String nome;
    private int quantidade;
    private double valor;
    private String descricao;


    public ProdutosEletronicos(){

    }


    public ProdutosEletronicos(Long id, String categoria, String nome, int quantidade,double valor, String descricao) {
        this.id = id;
        this.categoria = categoria;
        this.nome = nome;
        this.quantidade = quantidade;
        this.valor = valor;
        this.descricao = descricao;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCategoria() {
        return categoria;
    }

    public void setCategoria(String categoria) {
        this.categoria = categoria;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public int getQuantidade() {
        return quantidade;
    }

    public void setQuantidade(int quantidade) {
        this.quantidade = quantidade;
    }

    public double getValor() {
        return valor;
    }

    public void setValor(double valor) {
        this.valor = valor;
    }

    public String getDescricao() {
        return descricao;
    }

    public void setDescricao(String descricao) {
        this.descricao = descricao;
    }

    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) return false;
        ProdutosEletronicos that = (ProdutosEletronicos) o;
        return getQuantidade() == that.getQuantidade() && Double.compare(getValor(), that.getValor()) == 0 && Objects.equals(getId(), that.getId()) && Objects.equals(getCategoria(), that.getCategoria()) && Objects.equals(getNome(), that.getNome()) && Objects.equals(getDescricao(), that.getDescricao());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(), getCategoria(), getNome(), getQuantidade(), getValor(), getDescricao());
    }
}



//// ===== Usuarios.java =====
package com.loja_de_eletronicos.loja.Entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;

import java.util.Objects;

@Entity
@Table(name = "usuarios")
public class Usuarios {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @NotNull(message = "UsuÃ¡rio Ã© obrigÃ¡torio")
    private String usuario;
    @NotNull(message = "Senha Ã© obrigÃ¡torio")
    @Size(min = 8, message = "Senha com no mÃ­nimo 8 caracteres")
    private String senha;
    @NotNull(message = "Email Ã© obrigÃ¡torio")
    @Email(message = "Formato vÃ¡lido: exemploemail@hotmail.com")
    private String email;
    @NotNull(message = "Cep Ã© obrigÃ¡torio")
    @Pattern(regexp = "^\\d{5}-\\d{3}$")
    private String cep;
    @NotNull(message = "NÃºmero de telefone Ã© obrigÃ¡torio")
    @Pattern(regexp = "^\\d{2} \\d{4,5}-\\d{4}$", message = "Formato vÃ¡lido: xx xxxxx-xxxx")
    private String telefone;






    public Usuarios() {

    }

    public Usuarios(Long id, String usuario, String senha, String email, String cep, String telefone) {
        this.id = id;
        this.usuario = usuario;
        this.senha = senha;
        this.email = email;
        this.cep = cep;
        this.telefone = telefone;

    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsuario() {
        return usuario;
    }

    public void setUsuario(String usuario) {
        this.usuario = usuario;
    }

    public String getSenha() {
        return senha;
    }

    public void setSenha(String senha) {
        this.senha = senha;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getCep() {
        return cep;
    }

    public void setCep(String cep) {
        this.cep = cep;
    }

    public String getTelefone() {
        return telefone;
    }

    public void setTelefone(String telefone) {
        this.telefone = telefone;
    }

    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) return false;
        Usuarios usuarios = (Usuarios) o;
        return Objects.equals(getId(), usuarios.getId()) && Objects.equals(getUsuario(), usuarios.getUsuario()) && Objects.equals(getSenha(), usuarios.getSenha()) && Objects.equals(getEmail(), usuarios.getEmail()) && Objects.equals(getCep(), usuarios.getCep()) && Objects.equals(getTelefone(), usuarios.getTelefone());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId(), getUsuario(), getSenha(), getEmail(), getCep(), getTelefone());
    }
}



//// ===== CarrinhoRepository.java =====
package com.loja_de_eletronicos.loja.Repository;

import com.loja_de_eletronicos.loja.Entity.Carrinho;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;


import java.util.Optional;


@Repository
public interface CarrinhoRepository extends JpaRepository<Carrinho, Long> {


}



//// ===== CompraRepository.java =====
package com.loja_de_eletronicos.loja.Repository;

import com.loja_de_eletronicos.loja.Entity.Compra;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CompraRepository extends JpaRepository<Compra, Long> {


}



//// ===== ProdutosRepository.java =====
package com.loja_de_eletronicos.loja.Repository;

import com.loja_de_eletronicos.loja.Entity.ProdutosEletronicos;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ProdutosRepository extends JpaRepository<ProdutosEletronicos, Long> {
    
    List<ProdutosEletronicos> findByNome(String nome);
    List<ProdutosEletronicos> findByCategoria(String categoria);

}



//// ===== UsuariosRepository.java =====
package com.loja_de_eletronicos.loja.Repository;

import com.loja_de_eletronicos.loja.Entity.Usuarios;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface UsuariosRepository  extends JpaRepository<Usuarios, Long> {

    Optional<Usuarios> findByUsuario(String usuario);

    Optional<Usuarios> findByEmail(String email);


}



//// ===== HttpsConfig.java =====
package com.loja_de_eletronicos.loja.Security;

import org.apache.catalina.Context;
import org.apache.catalina.connector.Connector;
import org.apache.tomcat.util.descriptor.web.SecurityCollection;
import org.apache.tomcat.util.descriptor.web.SecurityConstraint;
import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;


@Configuration
public class HttpsConfig {

    @Bean
    public ServletWebServerFactory serverFactory() {
        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory() {
            @Override
            protected void postProcessContext(Context context) {
                SecurityConstraint constraint = new SecurityConstraint();

                constraint.setUserConstraint("CONFIDENTIAL");

                SecurityCollection collection = new SecurityCollection();
                collection.addPattern("/*");
                constraint.addCollection(collection);
                context.addConstraint(constraint);

            }
        };

        factory.addAdditionalTomcatConnectors(httpsConector());
        return factory;
    }

    @Bean
    public Connector httpsConector() {
        Connector connector = new Connector();
        connector.setScheme("http");
        connector.setPort(8080);
        connector.setSecure(false);
        connector.setRedirectPort(8443);
        return connector;
    }


}



//// ===== JwtConfig.java =====
package com.loja_de_eletronicos.loja.Security;

import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import javax.crypto.SecretKey;

@Configuration
public class JwtConfig {
    @Value("${jwt.secretKey}")
    private String secretKey;
    @Value("${jwt.expiration}")
    private Long expiration;


    @Bean
    public SecretKey secretKey(){
        return Keys.hmacShaKeyFor(Decoders.BASE64URL.decode(secretKey));
    }


    public Long getExpiration() {
        return expiration;
    }
}



//// ===== JwtFilter.java =====
package com.loja_de_eletronicos.loja.Security;


import com.loja_de_eletronicos.loja.Repository.UsuariosRepository;
import io.jsonwebtoken.Claims;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.util.Optional;

@Component
public class JwtFilter extends OncePerRequestFilter {
    private final JwtUtil jwtUtil;
    private final UsuariosRepository repository;

    @Autowired
    public JwtFilter(JwtUtil jwtUtil, UsuariosRepository repository) {
        this.jwtUtil = jwtUtil;
        this.repository = repository;
    }


    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {

        Optional.ofNullable(request.getHeader("Authorization"))
                .filter(header -> header.startsWith("Bearer "))
                .map(header -> header.substring(7))
                .ifPresent(token -> {
                    String usuarios = jwtUtil.extrairClaim(token, Claims::getSubject);

                    if (usuarios != null && SecurityContextHolder.getContext().getAuthentication() == null) {
                        repository.findByUsuario(usuarios).ifPresent(usuarios1 -> {
                            UserDetails user = User.builder()
                                    .username(usuarios1.getUsuario())
                                    .password(usuarios1.getSenha())
                                    .roles("USER")
                                    .build();

                            if (jwtUtil.isTokenValid(token)) {
                                UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());

                                authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                                SecurityContextHolder.getContext().setAuthentication(authenticationToken);

                            }


                        });


                    }

                });

        filterChain.doFilter(request, response);
    }

}




//// ===== JwtUtil.java =====
package com.loja_de_eletronicos.loja.Security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.function.Function;

@Component
public class JwtUtil {
    private final JwtConfig jwtConfig;


    @Autowired
    public JwtUtil(JwtConfig jwtConfig) {
        this.jwtConfig = jwtConfig;
    }


    public String generateKeys(UserDetails userDetails){
        return Jwts.builder()
                .signWith(jwtConfig.secretKey())
                .subject(userDetails.getUsername())
                .issuedAt(new Date())
                .expiration(new Date(System.currentTimeMillis() + jwtConfig.getExpiration()))
                .compact();
    }


    public Claims extrairAllClaims(String key){
        return Jwts.parser()
                .verifyWith(jwtConfig.secretKey())
                .build()
                .parseSignedClaims(key)
                .getPayload();
    }


    public <T> T extrairClaim(String key, Function<Claims, T> resolver){
        return resolver.apply(extrairAllClaims(key));
    }


    public boolean validadeClaims(String key, UserDetails userDetails){
        String usuario = extrairClaim(key, Claims::getSubject);
        return usuario.equals(userDetails.getUsername()) && isTokenValid(key);
    }

    public boolean isTokenValid(String key) {
        return extrairClaim(key, Claims::getExpiration).after(new Date());
    }


}



//// ===== SecurityConfig.java =====
package com.loja_de_eletronicos.loja.Security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
public class SecurityConfig {
    private JwtFilter jwtFilter;


    @Autowired
    public SecurityConfig(JwtFilter jwtFilter) {
        this.jwtFilter = jwtFilter;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
        httpSecurity.authorizeHttpRequests(http -> http
                        .requestMatchers("/cadastro", "/login").permitAll()
                        .requestMatchers("/produtos").permitAll()
                        .anyRequest().authenticated()
                )

                .requiresChannel(channelRequestMatcherRegistry -> channelRequestMatcherRegistry.anyRequest().requiresSecure())

                .headers(header -> header.contentSecurityPolicy(csp -> csp.policyDirectives("default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self'"))

                        .httpStrictTransportSecurity(https -> https
                                .includeSubDomains(true)
                                .preload(true)
                                .maxAgeInSeconds(31536000)
                        )
                        .frameOptions(HeadersConfigurer.FrameOptionsConfig::sameOrigin)
                )
                .csrf(AbstractHttpConfigurer::disable)
                .sessionManagement(sessin -> sessin.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);

        return httpSecurity.build();
    }


    @Bean
    public BCryptPasswordEncoder bCryptPasswordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager manager(AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }


}



//// ===== CarrinhoService.java =====
package com.loja_de_eletronicos.loja.Service;

import com.loja_de_eletronicos.loja.Entity.Carrinho;
import com.loja_de_eletronicos.loja.Entity.ProdutosEletronicos;
import com.loja_de_eletronicos.loja.Repository.CarrinhoRepository;
import com.loja_de_eletronicos.loja.Repository.ProdutosRepository;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.parameters.P;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class CarrinhoService {

    private final CarrinhoRepository repository;
    private final ProdutosRepository produtosRepository;


    public CarrinhoService(CarrinhoRepository repository, ProdutosRepository produtosRepository) {
        this.repository = repository;
        this.produtosRepository = produtosRepository;
    }

    public ResponseEntity<?> adicionarNoCarrinho(ProdutosEletronicos produtosEletronicos, int quantidade) {

        ProdutosEletronicos carrinhos = produtosRepository.findById(produtosEletronicos.getId()).orElseThrow(() -> new IllegalArgumentException("Produto nÃ£o encontrado"));

        Carrinho carrinho = new Carrinho
                (
                        carrinhos.getCategoria(),
                       carrinhos.getNome(),
                        quantidade,
                        carrinhos.getValor()
                );

        repository.save(carrinho);
        return ResponseEntity.ok("Adicionado com sucesso no carrinho");
    }

    public ResponseEntity<?> mostrarCarrinho() {

        List<Carrinho> carrinho = repository.findAll();
        if (carrinho.isEmpty()) {
            return ResponseEntity.ok("Carrinho estÃ¡ vÃ¡zio");
        }
        return ResponseEntity.ok(carrinho);
    }

    public ResponseEntity<?> limparCarrinho() {


        repository.deleteAll();
        return ResponseEntity.ok("Itens do carrinho removido com sucesso");
    }


}



//// ===== CompraService.java =====
package com.loja_de_eletronicos.loja.Service;

import com.loja_de_eletronicos.loja.Entity.Carrinho;
import com.loja_de_eletronicos.loja.Entity.Compra;
import com.loja_de_eletronicos.loja.Entity.ProdutosEletronicos;
import com.loja_de_eletronicos.loja.Entity.Usuarios;
import com.loja_de_eletronicos.loja.Repository.CompraRepository;
import com.loja_de_eletronicos.loja.Repository.ProdutosRepository;
import com.loja_de_eletronicos.loja.Repository.UsuariosRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

@Service
public class CompraService {

    private final ProdutosRepository produtosRepository;
    private final UsuariosRepository repository;

    @Autowired
    public CompraService(ProdutosRepository produtosRepository, UsuariosRepository repository) {
        this.produtosRepository = produtosRepository;
        this.repository = repository;
    }


    public ResponseEntity<?> compraEfetuada(Compra compra, int quantidade) {


        ProdutosEletronicos produtosEletronicos = produtosRepository.findById(compra.getId()).orElseThrow(()
                -> new IllegalArgumentException("Id nÃ£o encontrado"));


        if (produtosEletronicos.getQuantidade() < quantidade) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Estoque insufiente");
        }
        int comprado = produtosEletronicos.getQuantidade() - quantidade;
        produtosEletronicos.setQuantidade(comprado);
        produtosRepository.save(produtosEletronicos);

        return ResponseEntity.ok("Compra efetuada com sucesso");
    }

}



//// ===== ProdutosService.java =====
package com.loja_de_eletronicos.loja.Service;

import com.loja_de_eletronicos.loja.Entity.ProdutosEletronicos;
import com.loja_de_eletronicos.loja.Repository.ProdutosRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ProdutosService {

    private final ProdutosRepository repository;

    @Autowired
    public ProdutosService(ProdutosRepository repository) {
        this.repository = repository;
    }

    public List<ProdutosEletronicos> produtos() {
        return repository.findAll();
    }


    public ResponseEntity<?> buscarPorNome(ProdutosEletronicos produtos) {

        List<ProdutosEletronicos> produtosEletronicos = repository.findByNome(produtos.getNome());

        if (produtosEletronicos.isEmpty()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("Item nÃ£o encontrado");
        }

        return ResponseEntity.ok(produtosEletronicos);
    }


    public ResponseEntity<?> buscarPorCategoria(ProdutosEletronicos produtos) {

        List<ProdutosEletronicos> produtosEletronicos = repository.findByCategoria(produtos.getCategoria());

        if (produtosEletronicos.isEmpty()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("Categoria nÃ£o disponÃ­vel");
        }

        return ResponseEntity.ok(produtosEletronicos);
    }











}



//// ===== UsuariosService.java =====
package com.loja_de_eletronicos.loja.Service;

import com.loja_de_eletronicos.loja.Entity.Usuarios;
import com.loja_de_eletronicos.loja.Repository.UsuariosRepository;
import com.loja_de_eletronicos.loja.Security.JwtConfig;
import com.loja_de_eletronicos.loja.Security.SecurityConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

@Service
public class UsuariosService implements UserDetailsService {

    private final UsuariosRepository repository;
    private final SecurityConfig config;
    private final JwtUtil jwtUtil;


    @Autowired
    public UsuariosService(UsuariosRepository repository, SecurityConfig config, JwtUtil jwtUtil) {
        this.repository = repository;
        this.config = config;
        this.jwtUtil = jwtUtil;
    }


    public ResponseEntity<?> cadastro(Usuarios usuarios) {

        if (repository.findByUsuario(usuarios.getUsuario()).isPresent()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("UsuÃ¡rio jÃ¡ cadastrado");
        } else if (repository.findByEmail(usuarios.getEmail()).isPresent()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("Email jÃ¡ cadastrado");
        }

        usuarios.setSenha(config.bCryptPasswordEncoder().encode(usuarios.getSenha()));
        repository.save(usuarios);
        return ResponseEntity.ok("UsuÃ¡rio cadastrado com sucesso");
    }


    public String login(Usuarios usuarios) throws Exception {


        config.manager(
                        new AuthenticationConfiguration())
                .authenticate(new UsernamePasswordAuthenticationToken(usuarios.getUsuario(), usuarios.getSenha()));

        Usuarios usuarios1 = repository.findByUsuario(usuarios.getUsuario()).orElseThrow(() -> new IllegalArgumentException("UsuÃ¡rio nÃ£o encontrado"));
        UserDetails user = User.builder()
                .username(usuarios1.getUsuario())
                .password(usuarios1.getSenha())
                .roles("USER")
                .build();
        return jwtUtil.generateKeys(user);
    }


    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        Usuarios usuarios = repository.findByUsuario(username).orElseThrow(() -> new UsernameNotFoundException("UsuÃ¡rio nÃ£o encontrado"));


        return User.builder()
                .username(usuarios.getUsuario())
                .password(usuarios.getSenha())
                .roles("USER")
                .build();
    }
}



